#include "input_enums.hpp"

namespace engine::input {
    std::string format_as(MouseButton mouseButton) {
        switch (mouseButton)
        {
        case MouseButton::ButtonLeft:
            return "MouseButton_ButtonLeft";
        case MouseButton::ButtonRight:
            return "MouseButton_ButtonRight";
        case MouseButton::ButtonScroll:
            return "MouseButton_ButtonScroll";
        case MouseButton::Button3:
            return "MouseButton_Button3";
        case MouseButton::Button4:
            return "MouseButton_Button4";
        case MouseButton::Button5:
            return "MouseButton_Button5";
        case MouseButton::Button6:
            return "MouseButton_Button6";
        case MouseButton::ButtonLast:
            return "MouseButton_ButtonLast";
        default:
            return fmt::format("MouseButton_{}", (uint32_t)mouseButton);
        }
    }

    std::string format_as(Keycode keycode) {
        switch (keycode)
        {
		case Keycode::Space:
			return "Keycode_Space";
		case Keycode::Apostrophe:
			return "Keycode_Apostrophe";
		case Keycode::Comma:
			return "Keycode_Comma";
		case Keycode::Minus:
			return "Keycode_Minus";
		case Keycode::Period:
			return "Keycode_Period";
		case Keycode::Slash:
			return "Keycode_Slash";
		case Keycode::D0:
			return "Keycode_D0";
		case Keycode::D1:
			return "Keycode_D1";
		case Keycode::D2:
			return "Keycode_D2";
		case Keycode::D3:
			return "Keycode_D3";
		case Keycode::D4:
			return "Keycode_D4";
		case Keycode::D5:
			return "Keycode_D5";
		case Keycode::D6:
			return "Keycode_D6";
		case Keycode::D7:
			return "Keycode_D7";
		case Keycode::D8:
			return "Keycode_D8";
		case Keycode::D9:
			return "Keycode_D9";
		case Keycode::Semicolon:
			return "Keycode_Semicolon";
		case Keycode::Equal:
			return "Keycode_Equal";
		case Keycode::A:
			return "Keycode_A";
		case Keycode::B:
			return "Keycode_B";
		case Keycode::C:
			return "Keycode_C";
		case Keycode::D:
			return "Keycode_D";
		case Keycode::E:
			return "Keycode_E";
		case Keycode::F:
			return "Keycode_F";
		case Keycode::G:
			return "Keycode_G";
		case Keycode::H:
			return "Keycode_H";
		case Keycode::I:
			return "Keycode_I";
		case Keycode::J:
			return "Keycode_J";
		case Keycode::K:
			return "Keycode_K";
		case Keycode::L:
			return "Keycode_L";
		case Keycode::M:
			return "Keycode_M";
		case Keycode::N:
			return "Keycode_N";
		case Keycode::O:
			return "Keycode_O";
		case Keycode::P:
			return "Keycode_P";
		case Keycode::Q:
			return "Keycode_Q";
		case Keycode::R:
			return "Keycode_R";
		case Keycode::S:
			return "Keycode_S";
		case Keycode::T:
			return "Keycode_T";
		case Keycode::U:
			return "Keycode_U";
		case Keycode::V:
			return "Keycode_V";
		case Keycode::W:
			return "Keycode_W";
		case Keycode::X:
			return "Keycode_X";
		case Keycode::Y:
			return "Keycode_Y";
		case Keycode::Z:
			return "Keycode_Z";
		case Keycode::LeftBracket:
			return "Keycode_LeftBracket";
		case Keycode::Backslash:
			return "Keycode_Backslash";
		case Keycode::RightBracket:
			return "Keycode_RightBracket";
		case Keycode::Tilde:
			return "Keycode_Tilde";
		case Keycode::World1:
			return "Keycode_World1";
		case Keycode::World2:
			return "Keycode_World2";
		case Keycode::Escape:
			return "Keycode_Escape";
		case Keycode::Enter:
			return "Keycode_Enter";
		case Keycode::Tab:
			return "Keycode_Tab";
		case Keycode::Backspace:
			return "Keycode_Backspace";
		case Keycode::Insert:
			return "Keycode_Insert";
		case Keycode::Delete:
			return "Keycode_Delete";
		case Keycode::Right:
			return "Keycode_Right";
		case Keycode::Left:
			return "Keycode_Left";
		case Keycode::Down:
			return "Keycode_Down";
		case Keycode::Up:
			return "Keycode_Up";
		case Keycode::PageUp:
			return "Keycode_PageUp";
		case Keycode::PageDown:
			return "Keycode_PageDown";
		case Keycode::Home:
			return "Keycode_Home";
		case Keycode::End:
			return "Keycode_End";
		case Keycode::CapsLock:
			return "Keycode_CapsLock";
		case Keycode::ScrollLock:
			return "Keycode_ScrollLock";
		case Keycode::NumLock:
			return "Keycode_NumLock";
		case Keycode::PrintScreen:
			return "Keycode_PrintScreen";
		case Keycode::Pause:
			return "Keycode_Pause";
		case Keycode::F1:
			return "Keycode_F1";
		case Keycode::F2:
			return "Keycode_F2";
		case Keycode::F3:
			return "Keycode_F3";
		case Keycode::F4:
			return "Keycode_F4";
		case Keycode::F5:
			return "Keycode_F5";
		case Keycode::F6:
			return "Keycode_F6";
		case Keycode::F7:
			return "Keycode_F7";
		case Keycode::F8:
			return "Keycode_F8";
		case Keycode::F9:
			return "Keycode_F9";
		case Keycode::F10:
			return "Keycode_F10";
		case Keycode::F11:
			return "Keycode_F11";
		case Keycode::F12:
			return "Keycode_F12";
		case Keycode::F13:
			return "Keycode_F13";
		case Keycode::F14:
			return "Keycode_F14";
		case Keycode::F15:
			return "Keycode_F15";
		case Keycode::F16:
			return "Keycode_F16";
		case Keycode::F17:
			return "Keycode_F17";
		case Keycode::F18:
			return "Keycode_F18";
		case Keycode::F19:
			return "Keycode_F19";
		case Keycode::F20:
			return "Keycode_F20";
		case Keycode::F21:
			return "Keycode_F21";
		case Keycode::F22:
			return "Keycode_F22";
		case Keycode::F23:
			return "Keycode_F23";
		case Keycode::F24:
			return "Keycode_F24";
		case Keycode::F25:
			return "Keycode_F25";
		case Keycode::KP0:
			return "Keycode_KP0";
		case Keycode::KP1:
			return "Keycode_KP1";
		case Keycode::KP2:
			return "Keycode_KP2";
		case Keycode::KP3:
			return "Keycode_KP3";
		case Keycode::KP4:
			return "Keycode_KP4";
		case Keycode::KP5:
			return "Keycode_KP5";
		case Keycode::KP6:
			return "Keycode_KP6";
		case Keycode::KP7:
			return "Keycode_KP7";
		case Keycode::KP8:
			return "Keycode_KP8";
		case Keycode::KP9:
			return "Keycode_KP9";
		case Keycode::KPDecimal:
			return "Keycode_KPDecimal";
		case Keycode::KPDivide:
			return "Keycode_KPDivide";
		case Keycode::KPMultiply:
			return "Keycode_KPMultiply";
		case Keycode::KPSubtract:
			return "Keycode_KPSubtract";
		case Keycode::KPAdd:
			return "Keycode_KPAdd";
		case Keycode::KPEnter:
			return "Keycode_KPEnter";
		case Keycode::KPEqual:
			return "Keycode_KPEqual";
		case Keycode::LeftShift:
			return "Keycode_LeftShift";
		case Keycode::LeftControl:
			return "Keycode_LeftControl";
		case Keycode::LeftAlt:
			return "Keycode_LeftAlt";
		case Keycode::LeftSuper:
			return "Keycode_LeftSuper";
		case Keycode::RightShift:
			return "Keycode_RightShift";
		case Keycode::RightControl:
			return "Keycode_RightControl";
		case Keycode::RightAlt:
			return "Keycode_RightAlt";
		case Keycode::RightSuper:
			return "Keycode_RightSuper";
		case Keycode::Menu:
			return "Keycode_Menu";

        default:
            return fmt::format("Keycode_{}", (uint32_t)keycode);
        }
    }
}